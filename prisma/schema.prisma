// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
<<<<<<< HEAD
  id                Int       @id @default(autoincrement())
  roleId            Int
  name              String
  lastName          String
  birthDate         DateTime?
  email             String    @unique
  password          String
  groupId           Int?
  isRefresh         Boolean   @default(false)
  addDate           DateTime  @default(now())
  updateDate        DateTime  @updatedAt
  phoneNumber       String
  openPayCustomerId String    @unique

  addresses    Address[]
  cards        Card[]
  transactions Transaction[]
=======
  id               Int       @id @default(autoincrement())
  roleId           Int
  name             String
  lastName         String
  birthDate        DateTime?
  email            String    @unique
  password         String
  groupId          Int?
  isRefresh        Boolean   @default(false)
  addDate          DateTime  @default(now())
  updateDate       DateTime  @updatedAt
  phoneNumber      String
  openPayCustomerId String   @unique
 
  addresses        Address[]
  cards            Card[]

  subscriptions     Subscription[] // Cambiar de subscriptionData a subscriptions para relación 1:N
>>>>>>> b6c6203dbe7d645e43944824bec727d68a1fab97
}

model Address {
  id          Int    @id @default(autoincrement())
  city        String
  state       String
  street      String
  cologne     String
  postalCode  String
  countryCode String @db.VarChar(2)

  userId Int
  user   Users  @relation(fields: [userId], references: [id], onDelete: Cascade)
  cards  Card[]
}

model Plan {
  id              String   @id @default(uuid()) // Identificador único interno
  openpayId       String   @unique // ID del plan en OpenPay
  creationDate    DateTime // Fecha y hora en que se creó el Plan en OpenPay
  name            String   // Nombre del Plan
  amount          Decimal  @db.Decimal(10,2) // Monto con hasta 2 dígitos decimales
  currency        String   @default("MXN") // Moneda usada en la operación
  repeatEvery     Int      // Número de unidades tiempo entre cobros
  repeatUnit      String   // Frecuencia de cobro (week, month, year)
  retryTimes      Int      // Número de reintentos de cobro
  status          String   // Estatus del Plan (active, deleted)
  statusAfterRetry String  // Status después de agotar intentos (unpaid, cancelled)
  trialDays       Int      @default(0) // Número de días de prueba por defecto
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  subscriptions   Subscription[] // relación 1:N (un plan puede tener varias suscripciones)
}

model Subscription {
  id                    String   @id @default(uuid()) // Identificador único de la suscripción
  openpayId             String   // ID de la suscripción en OpenPay
  creationDate          DateTime // Fecha de creación de la suscripción
  cancelAtPeriodEnd     Boolean  // Si se cancela al terminar el periodo
  chargeDate            DateTime // Fecha del próximo cobro
  currentPeriodNumber   Int      // Periodo actual a cobrar
  periodEndDate         DateTime // Fecha en la que termina el periodo actual
  trialEndDate          DateTime? // Fecha en la que termina el periodo de prueba
  planId                String   // ID del plan en OpenPay
  status                String   // Estado de la suscripción
  customerId            String   // ID del cliente en OpenPay
  card                  Json?    // Objeto tarjeta
  userId                Int
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user                  Users    @relation(fields: [userId], references: [id])
  plan                  Plan     @relation(fields: [planId], references: [openpayId])
}

model Card {
  id              String   @id
  type            String
  brand           String
  cardNumber      String
  holderName      String
  expirationYear  String
  expirationMonth String
  allowsCharges   Boolean
  allowsPayouts   Boolean
  creationDate    DateTime
  bankName        String?
  bankCode        String?
  pointsCard      Boolean

  // Relación con Address
  addressId Int
  address   Address @relation(fields: [addressId], references: [id], onDelete: Cascade)

  // Relación con Users (usando ID numérico en lugar de openPayCustomerId)
  userId Int?
  user   Users? @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Campos de dirección para OpenPay (pueden ser opcionales si ya tienes la relación con Address)
<<<<<<< HEAD
  line1       String?
  line2       String?
  line3       String?
  city        String?
  state       String?
  postalCode  String?
  countryCode String?
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  quantity    Int
  price       Decimal
  addDate     DateTime @default(now())
  updateDate  DateTime @updatedAt
}

model Transaction {
  id                Int    @id @default(autoincrement())
  openpayId         String    @unique // ID de transacción en Openpay
  source_id         String? // Token de la tarjeta
  amount            Decimal 
  currency          String    @default("MXN")
  description       String
  order_id          String?
  device_session_id String?
  status            String // pending, completed, failed.
  method            String // card, bank_account, etc.
  clabe             String? // Para transferencias bancarias
  dueDate           DateTime? // Para transferencias bancarias
  metadata          Json? // Respuesta completa de Openpay
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relación con el cliente
  customerId Int
  customer   Users @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("transactions") //Decorador de prisma que ayuda a darle nombre de la tabla a la base de datos
=======
  line1           String?
  line2           String?
  line3           String?
  city            String?
  state           String?
  postalCode      String?
  countryCode     String?
>>>>>>> b6c6203dbe7d645e43944824bec727d68a1fab97
}
